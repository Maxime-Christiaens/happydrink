{"version":3,"sources":["fixtures.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["establishments","id","name","description","App","listEstablishement","map","establishment","react_default","a","createElement","key","className","react","src","logo","alt","this","props","title","phrase","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAAaA,SAAiB,CAC1B,CACIC,GAAc,YACdC,KAAc,WACdC,YAAc,2BAElB,CACIF,GAAc,YACdC,KAAc,YACdC,YAAc,8BAElB,CACIF,GAAc,YACdC,KAAc,WACdC,YAAc,sCCgCPC,mLAtCX,IAAMC,EAAqBL,EAAeM,IAAI,SAACC,GAC7C,OAIEC,EAAAC,EAAAC,cAAA,MACIC,IAAQJ,EAAcN,GACtBW,UAAY,iBAEhBJ,EAAAC,EAAAC,cAAA,UAAMH,EAAcL,MACpBM,EAAAC,EAAAC,cAAA,SACEH,EAAcJ,gBAKpB,OACEK,EAAAC,EAAAC,cAACG,EAAA,SAAD,KACAL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,OAAKI,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SACzCR,EAAAC,EAAAC,cAAA,wBAAiBO,KAAKC,MAAMC,OAC5BX,EAAAC,EAAAC,cAAA,SAAKO,KAAKC,MAAME,QAChBZ,EAAAC,EAAAC,cAAA,uBACaF,EAAAC,EAAAC,cAAA,kCAGfF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACXP,IAING,EAAAC,EAAAC,cAAA,+BApCYW,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,CAAKV,MAAQ,YAAYC,OAAS,yDAAuDU,SAASC,eAAe,SD2H3H,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.9a8dc4b7.chunk.js","sourcesContent":["export const establishments = [\n    {\n        id          : \"0890786GH\",\n        name        : \"Biberium\",\n        description : \"Un super bar karaoké\"\n    },\n    {\n        id          : \"0890786GD\",\n        name        : \"Brew Dogs\",\n        description : \"Un super bar à bière\"\n    },\n    {\n        id          : \"MJLMH0389\",\n        name        : \"Batonier\",\n        description : \"Un super bar de fin de soirée\"\n    }\n]","import React, { Component, Fragment } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {establishments} from './fixtures'\nclass App extends Component {\n  render() {\n    //Création d'une constante qui contiendra ce que la fonction map appliquera sur tout les éléments du tableau\n    //Dans notre cas la constante contiendra les info du tableau en JSX ce qui permettra de les afficher par la suite à l'aide du return\n    const listEstablishement = establishments.map((establishment)=>{\n      return(\n            // L'attribut \"key\" permet à React d'identifier les éléments.\n            // Cela améliore les performances lors de l'ajout,\n            // la modification et la suppression d'un élément.\n        <li\n            key = { establishment.id }\n            className = \"establishment\"\n        >\n        <h3>{ establishment.name }</h3>\n        <p>\n        { establishment.description }\n        </p>\n        </li>\n      )\n    })\n    return (\n      <Fragment>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>Welcome to { this.props.title }</h2>\n          <p>{ this.props.phrase }</p>\n          <p>\n            Happy Drink<code>(Bad Propaganda)</code> \n          </p>\n        </header>\n        <div className=\"App-establishment\">\n          { listEstablishement }\n        </div>\n      </div>\n      \n      <establishments />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App title = \"HappyCode\" phrase = \"la cosmogonie des grecs anciens débute avec chaos\"/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}